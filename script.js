// D·ªØ li·ªáu m·∫∑c ƒë·ªãnh
const defaultPeople = [
    "Ngu√™ÃÉyn VƒÉn ƒêi√™ÃÄn",
    "Tr√¢ÃÄn VƒÉn HoaÃÄng",
    "Nguy√™ÃÉn Th√™ÃÅ Qu√¢n",
    "Nguy√™ÃÉn TroÃ£ng ƒêaÃ£i",
    "Nguy√™ÃÉn C√¥ng ƒê∆∞ÃÅc",
    "PhaÃ£m Quang Trung",
    "Nguy√™ÃÉn VƒÉn C√¢ÃÄn",
    "VoÃÉ Duy C√¢ÃÄu",
    "Nguy√™ÃÉn VƒÉn Linh",
    "Nguy√™ÃÉn ƒê∆∞ÃÅc Vi√™Ã£t",
    "Tr√¢ÃÄn VƒÉn Kh∆∞∆°ng",
    "ThaÃÅi ThƒÉng Long",
    "Tr√¢ÃÄn VƒÉn HaÃâi",
    "Nguy√™ÃÉn HaÃÄ Anh",
    "L√™ Minh V∆∞∆°ng",
    "Nguy√™ÃÉn TroÃ£ng NhaÃÄn",
    "Nguy√™ÃÉn VƒÉn Huy",
    "TriÃ£nh Xu√¢n Tr∆∞∆°ÃÄng",
    "TƒÉng Xu√¢n ThƒÉÃÅng",
    "Nguy√™ÃÉn Anh Tu√¢ÃÅn",
    "ƒêoaÃÄn VƒÉn KyÃÄ",
    "Nguy√™ÃÉn C√¥ng PhuÃÅc",
];

let currentMeal = "lunch";
let currentDate = new Date().toISOString().split("T")[0];

// Kh·ªüi t·∫°o ·ª©ng d·ª•ng
function initApp() {
    // Kh·ªüi t·∫°o d·ªØ li·ªáu n·∫øu ch∆∞a c√≥
    if (!localStorage.getItem("people")) {
        localStorage.setItem("people", JSON.stringify(defaultPeople));
    }
    if (!localStorage.getItem("lunchPrice")) {
        localStorage.setItem("lunchPrice", "25000");
    }
    if (!localStorage.getItem("dinnerPrice")) {
        localStorage.setItem("dinnerPrice", "30000");
    }

    // Thi·∫øt l·∫≠p ng√†y hi·ªán t·∫°i
    document.getElementById("attendanceDate").value = currentDate;

    // T·ª± ƒë·ªông ch·ªçn b·ªØa ƒÉn theo th·ªùi gian
    autoSelectMeal();

    // C·∫≠p nh·∫≠t th·ªùi gian hi·ªán t·∫°i
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);

    // T·∫°o danh s√°ch th√°ng
    createMonthOptions();

    // T·∫£i d·ªØ li·ªáu
    loadAttendance();
    loadSettings();
    loadPeopleManager();
    updateStatistics();
}

function autoSelectMeal() {
    const now = new Date();
    const hour = now.getHours();

    // 6h s√°ng ƒë·∫øn 4h chi·ªÅu = b·ªØa tr∆∞a, c√≤n l·∫°i = b·ªØa t·ªëi
    if (hour >= 6 && hour < 16) {
        selectMeal("lunch");
        // document.getElementById("autoMealInfo").textContent =
        //     "üåÖ Hi·ªán t·∫°i l√† gi·ªù b·ªØa tr∆∞a";
    } else {
        selectMeal("dinner");
        // document.getElementById("autoMealInfo").textContent =
        //     "üåô Hi·ªán t·∫°i l√† gi·ªù b·ªØa t·ªëi";
    }
}

function updateCurrentTime() {
    const now = new Date();
    const timeString = now.toLocaleString("vi-VN", {
        timeZone: "Asia/Ho_Chi_Minh",
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
    });
    document.getElementById("currentTime").textContent = timeString;
}

// Chuy·ªÉn ƒë·ªïi tab
function switchTab(tabName) {
    // ·∫®n t·∫•t c·∫£ tab
    document.querySelectorAll(".tab-content").forEach((tab) => {
        tab.classList.remove("active");
    });
    document.querySelectorAll(".nav-tab").forEach((btn) => {
        btn.classList.remove("active");
    });

    // Hi·ªÉn th·ªã tab ƒë∆∞·ª£c ch·ªçn
    document.getElementById(tabName).classList.add("active");
    event.target.classList.add("active");

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu n·∫øu c·∫ßn
    if (tabName === "statistics") {
        updateStatistics();
    } else if (tabName === "settings") {
        loadPeopleManager();
    }
}

// Ch·ªçn b·ªØa ƒÉn
function selectMeal(meal) {
    currentMeal = meal;
    document.querySelectorAll(".meal-btn").forEach((btn) => {
        btn.classList.remove("active");
    });
    document.getElementById(meal + "Btn").classList.add("active");
    loadAttendance();
}

function loadAttendance() {
    currentDate = document.getElementById("attendanceDate").value;
    const people = JSON.parse(localStorage.getItem("people"));
    const attendanceKey = `attendance_${currentDate}_${currentMeal}`;
    const attendance = JSON.parse(localStorage.getItem(attendanceKey) || "{}");

    const personList = document.getElementById("personList");
    personList.innerHTML = "";

    let presentCount = 0;
    let absentCount = 0;

    people.forEach((person, index) => {
        const personItem = document.createElement("div");
        personItem.className = "person-item";

        const isPresent = attendance[person] || false;
        if (isPresent) presentCount++;
        else absentCount++;

        personItem.innerHTML = `
            <div class="person-name">${person}</div>
            <div class="attendance-toggle ${isPresent ? "active" : ""}" 
                 onclick="toggleAttendance('${person}')"></div>
        `;

        personList.appendChild(personItem);
    });

    // C·∫≠p nh·∫≠t th·ªëng k√™ t√≥m t·∫Øt
    document.getElementById("presentCount").textContent = presentCount;
    document.getElementById("absentCount").textContent = absentCount;
}

// Chuy·ªÉn ƒë·ªïi tr·∫°ng th√°i c√≥ m·∫∑t
function toggleAttendance(person) {
    const attendanceKey = `attendance_${currentDate}_${currentMeal}`;
    const attendance = JSON.parse(localStorage.getItem(attendanceKey) || "{}");

    attendance[person] = !attendance[person];
    localStorage.setItem(attendanceKey, JSON.stringify(attendance));

    loadAttendance();
}

function addPerson() {
    const newPersonName = document.getElementById("newPersonName").value.trim();

    if (!newPersonName) {
        alert("Vui l√≤ng nh·∫≠p t√™n ng∆∞·ªùi m·ªõi!");
        return;
    }

    const people = JSON.parse(localStorage.getItem("people"));

    if (people.includes(newPersonName)) {
        alert("Ng∆∞·ªùi n√†y ƒë√£ c√≥ trong danh s√°ch!");
        return;
    }

    people.unshift(newPersonName);
    localStorage.setItem("people", JSON.stringify(people));

    document.getElementById("newPersonName").value = "";
    loadPeopleManager();
    loadAttendance();
    updateStatistics();


}

function loadPeopleManager() {
    const people = JSON.parse(localStorage.getItem("people"));
    const peopleManager = document.getElementById("peopleManager");

    peopleManager.innerHTML = "";

    people.forEach((person, index) => {
        const personDiv = document.createElement("div");
        personDiv.className = "person-manager-item";
        personDiv.innerHTML = `
            <div class="person-manager-name">${person}</div>
            <button class="delete-btn" onclick="deletePerson(${index})">X√≥a</button>
        `;
        peopleManager.appendChild(personDiv);
    });
}

function deletePerson(index) {
    const people = JSON.parse(localStorage.getItem("people"));
    const personName = people[index];

    if (confirm(`B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a "${personName}" kh·ªèi danh s√°ch?`)) {
        people.splice(index, 1);
        localStorage.setItem("people", JSON.stringify(people));

        loadPeopleManager();
        loadAttendance();
        updateStatistics();
    }
}

// T·∫°o options cho selector th√°ng
function createMonthOptions() {
    const monthSelector = document.getElementById("monthSelector");
    const currentDate = new Date();

    for (let i = 0; i < 12; i++) {
        const date = new Date(
            currentDate.getFullYear(),
            currentDate.getMonth() - i,
            1
        );
        const option = document.createElement("option");
        option.value = `${date.getFullYear()}-${String(
            date.getMonth() + 1
        ).padStart(2, "0")}`;
        option.textContent = `${date.getMonth() + 1}/${date.getFullYear()}`;
        if (i === 0) option.selected = true;
        monthSelector.appendChild(option);
    }
}

function updateStatistics() {
    const selectedMonth = document.getElementById("monthSelector").value;
    const people = JSON.parse(localStorage.getItem("people"));
    const lunchPrice = Number.parseInt(localStorage.getItem("lunchPrice"));
    const dinnerPrice = Number.parseInt(localStorage.getItem("dinnerPrice"));

    let totalMeals = 0;
    let totalCost = 0;
    const personStats = {};

    // Kh·ªüi t·∫°o stats cho t·ª´ng ng∆∞·ªùi
    people.forEach((person) => {
        personStats[person] = { lunch: 0, dinner: 0, cost: 0 };
    });

    // Duy·ªát qua t·∫•t c·∫£ c√°c ng√†y trong th√°ng
    const [year, month] = selectedMonth.split("-");
    const daysInMonth = new Date(year, month, 0).getDate();

    for (let day = 1; day <= daysInMonth; day++) {
        const dateStr = `${year}-${month}-${String(day).padStart(2, "0")}`;

        // Ki·ªÉm tra b·ªØa tr∆∞a
        const lunchKey = `attendance_${dateStr}_lunch`;
        const lunchAttendance = JSON.parse(
            localStorage.getItem(lunchKey) || "{}"
        );

        // Ki·ªÉm tra b·ªØa t·ªëi
        const dinnerKey = `attendance_${dateStr}_dinner`;
        const dinnerAttendance = JSON.parse(
            localStorage.getItem(dinnerKey) || "{}"
        );

        people.forEach((person) => {
            if (lunchAttendance[person]) {
                personStats[person].lunch++;
                personStats[person].cost += lunchPrice;
                totalMeals++;
                totalCost += lunchPrice;
            }
            if (dinnerAttendance[person]) {
                personStats[person].dinner++;
                personStats[person].cost += dinnerPrice;
                totalMeals++;
                totalCost += dinnerPrice;
            }
        });
    }

    // C·∫≠p nh·∫≠t UI
    document.getElementById("totalMeals").textContent = totalMeals;
    document.getElementById("totalCost").textContent =
        formatCurrency(totalCost);
    document.getElementById("avgDaily").textContent = Math.round(
        totalMeals / daysInMonth
    );
    document.getElementById("totalPeople").textContent = people.length;
    document.getElementById("monthlyTotal").textContent =
        formatCurrency(totalCost);

    // C·∫≠p nh·∫≠t th·ªëng k√™ t·ª´ng ng∆∞·ªùi
    const personStatsContainer = document.getElementById("personStats");
    personStatsContainer.innerHTML = "";

    people.forEach((person) => {
        const stats = personStats[person];
        const personDiv = document.createElement("div");
        personDiv.className = "person-stat";
        personDiv.innerHTML = `
            <div>
                <div class="person-name">${person}</div>
                <div class="person-meals">Tr∆∞a: ${stats.lunch} | T·ªëi: ${
            stats.dinner
        }</div>
            </div>
            <div class="person-cost">${formatCurrency(stats.cost)}</div>
        `;
        personStatsContainer.appendChild(personDiv);
    });
}

// T·∫£i c√†i ƒë·∫∑t
function loadSettings() {
    document.getElementById("lunchPrice").value =
        localStorage.getItem("lunchPrice");
    document.getElementById("dinnerPrice").value =
        localStorage.getItem("dinnerPrice");
}

// L∆∞u gi√° b·ªØa ƒÉn
function savePrices() {
    const lunchPrice = document.getElementById("lunchPrice").value;
    const dinnerPrice = document.getElementById("dinnerPrice").value;

    if (lunchPrice) localStorage.setItem("lunchPrice", lunchPrice);
    if (dinnerPrice) localStorage.setItem("dinnerPrice", dinnerPrice);

    alert("ƒê√£ l∆∞u c√†i ƒë·∫∑t th√†nh c√¥ng!");
    updateStatistics();
}

function exportData() {
    const data = {
        people: JSON.parse(localStorage.getItem("people")),
        lunchPrice: localStorage.getItem("lunchPrice"),
        dinnerPrice: localStorage.getItem("dinnerPrice"),
        attendance: {},
    };

    // Xu·∫•t t·∫•t c·∫£ d·ªØ li·ªáu ch·∫•m c√¥ng
    for (const key in localStorage) {
        if (key.startsWith("attendance_")) {
            data.attendance[key] = localStorage.getItem(key);
        }
    }

    const dataStr = JSON.stringify(data, null, 2);
    const dataBlob = new Blob([dataStr], { type: "application/json" });

    const link = document.createElement("a");
    link.href = URL.createObjectURL(dataBlob);
    link.download = `meal-data-${new Date().toISOString().split("T")[0]}.json`;
    link.click();
}

function importData(event) {
    const file = event.target.files[0];
    if (!file) return;

    const reader = new FileReader();
    reader.onload = (e) => {
        try {
            const data = JSON.parse(e.target.result);

            // Kh√¥i ph·ª•c d·ªØ li·ªáu
            localStorage.setItem("people", JSON.stringify(data.people));
            localStorage.setItem("lunchPrice", data.lunchPrice);
            localStorage.setItem("dinnerPrice", data.dinnerPrice);

            // Kh√¥i ph·ª•c d·ªØ li·ªáu ch·∫•m c√¥ng
            for (const key in data.attendance) {
                localStorage.setItem(key, data.attendance[key]);
            }

            // T·∫£i l·∫°i giao di·ªán
            loadAttendance();
            loadSettings();
            loadPeopleManager();
            updateStatistics();

            alert("ƒê√£ nh·∫≠p d·ªØ li·ªáu th√†nh c√¥ng!");
        } catch (error) {
            alert("L·ªói: File kh√¥ng h·ª£p l·ªá!");
        }
    };
    reader.readAsText(file);
}

// Format ti·ªÅn t·ªá
function formatCurrency(amount) {
    return new Intl.NumberFormat("vi-VN", {
        style: "currency",
        currency: "VND",
    }).format(amount);
}

document.addEventListener("DOMContentLoaded", () => {
    initApp();

    // X·ª≠ l√Ω ph√≠m Enter cho form th√™m ng∆∞·ªùi
    document
        .getElementById("newPersonName")
        .addEventListener("keypress", (e) => {
            if (e.key === "Enter") {
                addPerson();
            }
        });
});
